name: CI

# Build on every branch every push and pull request change.
on: push

jobs:
  build:
    name: Check project quality with `mllint` and `dslinter` and run pytest
    runs-on: ubuntu-20.04
    steps:
      - name: Clone project
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL -o install-poetry.py https://install.python-poetry.org
          python install-poetry.py --pre
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Get Poetry cache
        id: poetry-cache
        run: |
          python -c "print('::set-output name=dir::', end='')"
          poetry config cache-dir

      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key:
            poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
            poetry-

      - name: Install dependencies
        run: |
          poetry install

      - name: DVC pull
        run: |
          mkdir .dvc/tmp
          mv gdrive-creds.json .dvc/tmp/gdrive-user-credentials.json
          poetry run dvc pull

      # - name: Run mllint
      #   run:
      #     poetry run mllint -o mllint-report.md

      # - name: Upload `mllint` report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: mllint-report.md
      #     path: mllint-report.md

      - name: Lint with pylint
        run: poetry run pylint $(git ls-files '*.py')

      - name: Upload `pylint` report
        uses: actions/upload-artifact@v3
        with:
          name: report.txt
          path: report.txt

      - name: Install pytest plugin
        run: poetry run python -m pip install pytest-github-actions-annotate-failures

      - name: Test with pytest
        run: |
          poetry run pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml tests/

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload pytest-cov results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-cov
          path: coverage.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

